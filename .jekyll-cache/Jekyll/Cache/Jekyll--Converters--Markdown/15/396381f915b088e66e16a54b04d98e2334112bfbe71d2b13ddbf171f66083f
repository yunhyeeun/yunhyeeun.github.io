I"<hr />

<h2 id="genetic-algorithm">Genetic Algorithm</h2>

<p>쉽게 말해 solution을 찾을 때 Darwinian evolution을 차용하는 기법이다. <br />
시간을 거듭할수록 population이 더 좋은 fitness value를 갖는 방향으로 진화한다고 이해하면 된다.</p>

<h3 id="exploitation-vs-exploration">exploitation vs exploration</h3>
<p><br />
궁극적으로는 global optima를 찾는 것이 목표다. <br />
그러나 그 과정에서 <strong>exploitation</strong>과 <strong>exploration</strong>의 균형을 유지해야 한다. <br />
Exploitation에 너무 치중하면 convergence에 너무 빨리 도달하여 suboptimal한 결과를 얻을 수 있다.   <br />
반대로 exploration에 너무 치중하면 길을 잃고 만다.</p>

<ul>
  <li>too much pressure : premature convergence</li>
  <li>too little pressure : search goes nowhere</li>
</ul>

<p>Genetic Algorithm 순서는 다음과 같다.</p>

<ol>
  <li>Initial Population</li>
  <li>Evaluate Fitness of Population</li>
  <li>Select Fitter Individuals as Parents</li>
  <li>Create Offsprings from Parents</li>
  <li>Mutate Offsprings</li>
  <li>Form Next Generation of Population</li>
  <li>Loop 2~6 until criterion met</li>
</ol>

<p>예시를 살펴보자. <br />
임의의 6자리 비밀번호를 찾는 것이 문제다. <br />
정답이 893714 라고 가정하자.</p>

<h3 id="step-1-randomly-generate-initial-population">Step 1. Randomly Generate Initial Population</h3>

<p>초기 population은 아래와 같다.</p>

<ul>
  <li>193562</li>
  <li>243690</li>
  <li>123456</li>
  <li>121214
<br /></li>
</ul>

<h3 id="step-2-evaluate-fitness-of-population">Step 2. Evaluate Fitness of Population</h3>

<p>정답인 893714와 일치하는 숫자 개수를 세어본다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Password</th>
      <th style="text-align: center">Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">193562</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center">243690</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">123456</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">121214</td>
      <td style="text-align: center">2</td>
    </tr>
  </tbody>
</table>

<h3 id="step-3--4-choose-parents-and-crossover">Step 3 &amp; 4. Choose Parents and Crossover</h3>

<p>score가 높은 password를 부모로 삼고 crossover한다. <br />
crossover 역시 random으로 일어나는 것이 원칙이지만 빠른 결과를 위해 내마음대로 바꿨다.</p>

<p>Parents : 193562, 121214 <br />
Offsprings : 193514, 121262</p>

<h3 id="step-5-mutation">Step 5. Mutation</h3>

<p>mutation을 하는 이유는 짐작했겠지만 mutation을 하지 않으면 새로운 element가 pool 안으로 들어올 수 없다.</p>

<p>Before Mutation : 193514, 121262 <br />
After Mutation : 893514, 123262</p>

<p><br />
위 과정을 몇번 반복하면 정답인 893714를 금방 만들 수 있다.</p>

<p>이제 과정을 하나하나씩 살펴보자.</p>

<h2 id="initial-population">Initial Population</h2>

<p>초기 population은 random하게 생성한다. <br />
이 때 population은 diversity가 보장되어야 한다. <br />
다양한 phenotype이 많을수록 좋다.</p>

<h2 id="selection-operators">Selection Operators</h2>

<p>GA에서 selection operator를 사용하는 순간은 두 번이다. <br />
부모를 선택할 때, 그리고 next generation을 선택할 때.</p>

<h3 id="fitness-proportional-selection-fps">Fitness Proportional Selection (FPS)</h3>

<p>어떤 individual이 선택될 가능성이 높을까? <br />
Fitness가 좋으면 뽑힐 가능성이 높다. <br />
수식으로 나타내면 다음과 같다.</p>

<p><img src="/assets/images/ga-1.png" alt="Fitness Proportional Selection" /></p>

<p>이 식은 문제점이 있다. <br />
특정 individual이 다른 individual에 비해 튀면 premature convergence가 일어날 수 있다. <br />
반대로 individual 간 fitness가 비슷비슷하면 selection pressure는 없는 셈이 된다.</p>

<p>FPS를 개선해보자.</p>

<p><strong>Windowing</strong> : raw fitness에서 특정 값을 뺀 값을 fitness로 정한다. <br />
이 때 특정 값은 주로 <strong>해당 generation에서 최소 fitness</strong>를 사용한다.</p>

<p><strong>Sigma scaling</strong> : normalization과 비슷하다.
<img src="/assets/images/ga-2.png" alt="Sigma scaling" /></p>

<h3 id="ranking-selection">Ranking Selection</h3>

<p>FPS말고 population 사이 순위를 매겨서 selection pressure를 일정하게 만드는 방법도 있다. <br />
예를 들어 population size가 N이면 가장 좋은 individual은 1등이고 가장 나쁜 individual은 등이다.</p>

<p><strong>Linear ranking</strong></p>

<p><img src="/assets/images/ga-3.png" alt="Linear ranking" /> <br />
(s는 hyperparameter이다.)</p>

<p><img src="/assets/images/ga-4.png" alt="Linear ranking vs FPS" /></p>

<p><strong>Exponential ranking</strong></p>

:ET