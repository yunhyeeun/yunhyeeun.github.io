I"{
<hr />

<p>Search Based Software Enginnering</p>

<blockquote>
  <p>Meta-heuristic : strategies that guide the search of the acceptable solution</p>
</blockquote>

<p>metaheuristic이면 특정 문제에 국한되지 않고 solution을 찾는 기술이라고 생각하면 된다.</p>

<p>게임을 예시로 생각해보자. <br />
무슨 게임을 하든 보통 사람은 스테이지를 한 번에 클리어를 못한다. <br />
몇 번의 시행착오를 거쳐야 한다. <br />
그리고 게임을 하기 전에 메뉴얼을 꼼꼼히 다 읽고 시작하는 사람도 없다. <br />
그냥 다들 무작정 start 버튼을 누르지 않나..?</p>

<p>슈퍼마리오 게임을 하다가 구멍에 떨어져 죽었다면 다음 trial에서는 점프하는 순간이나 위치를 조금 수정해서 시도해볼 것이다. <br />
그러니까 몇번 죽어봐야 스테이지를 클리어하는 느낌이다.</p>

<p>이런 상황에서 아이디어를 갖고와보자.</p>

<ol>
  <li><strong>representation</strong> : 이번에는 무엇을 시도해볼까?</li>
  <li><strong>operator</strong> : 이전 trial과는 어떻게 다르게 시도해볼까?</li>
  <li><strong>fitness function</strong> : 이번에는 얼마나 잘했는가?</li>
</ol>

<p>이 세가지를 슈퍼마리오에 대입해보자.</p>

<ol>
  <li>representation : (점프 키, 점프 시작 시간, 점프 시작 위치)</li>
  <li>operator : 점프 시작 시간이나 위치를 증가/감소, 점프 키 대신 공격 키로 치환</li>
  <li>fitness function : 죽기 직전까지 이동한 거리</li>
</ol>

<h2 id="fitness-landscape">Fitness Landscape</h2>

<p>우리가 optimisation을 할 때 잘 하고 있는지 눈으로 확인하기 어렵다. <br />
하지만 가능만 하다면 매우 유용하다. <br />
solution space(S)와 fitness function(F)가 주어질 때, fitness landscape는 <strong>F: S -&gt; R의 hyper dimensional surface</strong>이다.</p>

<p>여기 문제가 하나 있다.</p>

<p>0 &lt;= x &lt;= 10, 0 &lt;= y &lt;= 10 일 때, x + y = 10을 만족하는 (x, y) 쌍을 찾으시오.</p>

<p>여기서 solution space는 다음과 같다.</p>

<p><img src="/assets/images/sbse-1.png" alt="solution space" /></p>

<p>그럼 문제에서 fitness function은 어떻게 정의할 수 있을까?</p>

<p>fitness function은 이번 trial이 얼마나 좋은지 판단하는 역할을 한다. <br />
따라서 다음과 같이 정의할 수 있다.</p>

<blockquote>
  <table>
    <tbody>
      <tr>
        <td>f(x, y) =</td>
        <td>10 - (x + y)</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<p>fitness function이 minimize할수록 soluiton에 가깝다.</p>
:ET